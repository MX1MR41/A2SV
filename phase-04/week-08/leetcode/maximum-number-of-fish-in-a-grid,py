class Solution:
    def findMaxFish(self, grid: List[List[int]]) -> int:

        M, N = len(grid), len(grid[0])
        inbound = lambda r, c: 0 <= r < M and 0 <= c < N
        dirs = [(1,0),(-1,0),(0,1),(0,-1)]

        def dfs(r, c):
            nonlocal visited
            if (r,c) in visited: return
            visited.add((r,c))

            curr = grid[r][c]
            

            for d_r, d_c in dirs:
                r_new, c_new = r + d_r, c + d_c
                if inbound(r_new, c_new) and grid[r_new][c_new] and (r_new, c_new) not in visited:
                    curr += dfs(r_new, c_new)

            return curr

        visited = set()
        res = 0
        for i in range(M):
            for j in range(N):
                if grid[i][j] and (i,j) not in visited:
                    curr = dfs(i, j)
                    res = max(res, curr)


        return res





            
